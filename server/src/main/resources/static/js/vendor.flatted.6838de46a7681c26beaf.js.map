{"version":3,"sources":["webpack:///./node_modules/flatted/esm/index.js"],"names":["Flatted","Primitive","primitive","parse","text","reviver","input","JSON","Primitives","map","primitives","value","$","noop","tmp","revive","parsed","output","Object","keys","reduce","key","has","call","add","Set","stringify","replacer","space","firstRun","known","Map","k","v","indexOf","i","set","replace","after","this","get","length","join","index","push","String"],"mappings":"2FAAA,2FAAIA,EAAW,SAAUC,EAAWC,GAsElC,MAlDc,CAEZC,MAAO,SAAeC,EAAMC,GAC1B,IAAIC,EAAQC,KAAKJ,MAAMC,EAAMI,GAAYC,IAAIC,GACzCC,EAAQL,EAAM,GACdM,EAAIP,GAAWQ,EACfC,EAAuB,iBAAVH,GAAsBA,EAkD3C,SAASI,EAAOT,EAAOU,EAAQC,EAAQL,GACrC,OAAOM,OAAOC,KAAKF,GAAQG,QACzB,SAAUH,EAAQI,GAChB,IAAIV,EAAQM,EAAOI,GACnB,GAAIV,aAAiBV,EAAW,CAC9B,IAAIa,EAAMR,EAAMK,GACG,iBAARG,GAAqBE,EAAOM,IAAIR,GAIzCG,EAAOI,GAAOT,EAAEW,KAAKN,EAAQI,EAAKP,IAHlCE,EAAOQ,IAAIV,GACXG,EAAOI,GAAOT,EAAEW,KAAKN,EAAQI,EAAKN,EAAOT,EAAOU,EAAQF,EAAKF,UAK/DK,EAAOI,GAAOT,EAAEW,KAAKN,EAAQI,EAAKV,GACpC,OAAOM,IAETA,GAjEYF,CAAOT,EAAO,IAAImB,IAAKd,EAAOC,GAC9BD,EACZ,OAAOC,EAAEW,KAAK,CAAC,GAAIT,GAAM,GAAIA,IAG/BY,UAAW,SAAmBf,EAAOgB,EAAUC,GAC7C,IAAK,IACHC,EACAC,EAAQ,IAAIC,IACZzB,EAAQ,GACRW,EAAS,GACTL,EAAIe,UAAmBA,UAAoBrB,EACrC,SAAU0B,EAAGC,GACX,GAAU,KAAND,IAAa,EAAIL,EAASO,QAAQF,GAAI,OAAOC,GAElDN,GAAYd,EACnBsB,GAAKC,EAAIN,EAAOxB,EAAOM,EAAEW,KAAK,CAAC,GAAIZ,GAAQ,GAAIA,IAC/C0B,EAAU,SAAUhB,EAAKV,GACvB,GAAIkB,EAEF,OADAA,GAAYA,EACLlB,EAIT,IAAI2B,EAAQ1B,EAAEW,KAAKgB,KAAMlB,EAAKV,GAC9B,cAAe2B,GACb,IAAK,SACH,GAAc,OAAVA,EAAgB,OAAOA,EAC7B,IA2DF,SA1DI,OAAOR,EAAMU,IAAIF,IAAUF,EAAIN,EAAOxB,EAAOgC,GAEjD,OAAOA,GAETH,EAAI7B,EAAMmC,OAAQN,IAElBN,GAAW,EACXZ,EAAOkB,GAAK5B,KAAKmB,UAAUpB,EAAM6B,GAAIE,EAAST,GAEhD,MAAO,IAAMX,EAAOyB,KAAK,KAAO,MAOpC,SAAS7B,EAAKQ,EAAKV,GACjB,OAAOA,EAuBT,SAASyB,EAAIN,EAAOxB,EAAOK,GACzB,IAAIgC,EAAQ1C,EAAUK,EAAMsC,KAAKjC,GAAS,GAE1C,OADAmB,EAAMM,IAAIzB,EAAOgC,GACVA,EAOT,SAASjC,EAAWC,GAClB,OAAOA,aAAiBV,EAAYA,EAAUU,GAASA,EAGzD,SAASH,EAAWa,EAAKV,GACvB,MAGM,iBAHQA,EAAsB,IAAIV,EAAUU,GAASA,GA/GjD,CAkHZkC,QACa,YACR,IAAI1C,EAAQH,EAAQG,MAChBuB,EAAY1B,EAAQ0B","file":"js/vendor.flatted.6838de46a7681c26beaf.js","sourcesContent":["var Flatted = (function (Primitive, primitive) {\n\n  /*!\n   * ISC License\n   *\n   * Copyright (c) 2018, Andrea Giammarchi, @WebReflection\n   *\n   * Permission to use, copy, modify, and/or distribute this software for any\n   * purpose with or without fee is hereby granted, provided that the above\n   * copyright notice and this permission notice appear in all copies.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n   * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n   * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n   * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n   * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n   * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n   * PERFORMANCE OF THIS SOFTWARE.\n   */\n\n  var Flatted = {\n\n    parse: function parse(text, reviver) {\n      var input = JSON.parse(text, Primitives).map(primitives);\n      var value = input[0];\n      var $ = reviver || noop;\n      var tmp = typeof value === 'object' && value ?\n                  revive(input, new Set, value, $) :\n                  value;\n      return $.call({'': tmp}, '', tmp);\n    },\n\n    stringify: function stringify(value, replacer, space) {\n      for (var\n        firstRun,\n        known = new Map,\n        input = [],\n        output = [],\n        $ = replacer && typeof replacer === typeof input ?\n              function (k, v) {\n                if (k === '' || -1 < replacer.indexOf(k)) return v;\n              } :\n              (replacer || noop),\n        i = +set(known, input, $.call({'': value}, '', value)),\n        replace = function (key, value) {\n          if (firstRun) {\n            firstRun = !firstRun;\n            return value;\n            // this was invoking twice each root object\n            // return i < 1 ? value : $.call(this, key, value);\n          }\n          var after = $.call(this, key, value);\n          switch (typeof after) {\n            case 'object':\n              if (after === null) return after;\n            case primitive:\n              return known.get(after) || set(known, input, after);\n          }\n          return after;\n        };\n        i < input.length; i++\n      ) {\n        firstRun = true;\n        output[i] = JSON.stringify(input[i], replace, space);\n      }\n      return '[' + output.join(',') + ']';\n    }\n\n  };\n\n  return Flatted;\n\n  function noop(key, value) {\n    return value;\n  }\n\n  function revive(input, parsed, output, $) {\n    return Object.keys(output).reduce(\n      function (output, key) {\n        var value = output[key];\n        if (value instanceof Primitive) {\n          var tmp = input[value];\n          if (typeof tmp === 'object' && !parsed.has(tmp)) {\n            parsed.add(tmp);\n            output[key] = $.call(output, key, revive(input, parsed, tmp, $));\n          } else {\n            output[key] = $.call(output, key, tmp);\n          }\n        } else\n          output[key] = $.call(output, key, value);\n        return output;\n      },\n      output\n    );\n  }\n\n  function set(known, input, value) {\n    var index = Primitive(input.push(value) - 1);\n    known.set(value, index);\n    return index;\n  }\n\n  // the two kinds of primitives\n  //  1. the real one\n  //  2. the wrapped one\n\n  function primitives(value) {\n    return value instanceof Primitive ? Primitive(value) : value;\n  }\n\n  function Primitives(key, value) {\n    return typeof value === primitive ? new Primitive(value) : value;\n  }\n\n}(String, 'string'));\nexport default Flatted;\nexport var parse = Flatted.parse;\nexport var stringify = Flatted.stringify;\n"],"sourceRoot":""}